[project]
name = "iagent"
version = "0.0.1"
description = "IAgent is multi-agent library, not a framework. It aims to provide primitive to enable you build agent application, than locking you in a specific framework"
authors = []
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.0.0",
]

[tool.poetry]
packages = [
    { include = "iagent", from = "src" }
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0"
]

dev = [
    "black>=23.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0"
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0"
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-ra -q --cov=src/iagent"
pythonpath = [
    "src"
]

[tool.coverage.run]
source = ["src/iagent"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
ignore_errors = true
omit = [
    "tests/*",
    "setup.py",
]

[tool.black]
line-length = 88
target-version = ["py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.ruff]
line-length = 88
target-version = "py312"
select = ["E", "F", "B", "I"]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
mypy_path = "src"
explicit_package_bases = true
namespace_packages = true

[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_missing_imports = true
check_untyped_defs = true
