import os

from dotenv import load_dotenv

from iagent.ai.messages import HumanMessage, ToolMessage

load_dotenv()

mcp_server_path = "./math_server.py"
mcp_server_path = os.path.abspath(mcp_server_path)

from langchain_google_vertexai import ChatVertexAI
from langchain_mcp_adapters.tools import load_mcp_tools
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

server_params = StdioServerParameters(
    command="python",
    # Make sure to update to the full absolute path to your math_server.py file
    args=[mcp_server_path],
)

import asyncio


async def main():
    llm = ChatVertexAI(
        model="gemini-2.5-flash-preview-04-17",
        temperature=0.7,
        max_tokens=None,
        max_retries=6,
    )
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            # Initialize the connection
            await session.initialize()

            # Get tools
            tools = await load_mcp_tools(session)
            print(f"Tools:\n{tools}")

            # # Create and run the agent
            # agent = create_react_agent(llm, tools)
            # agent_response = await agent.ainvoke({"messages": "what's (3 + 5) x 12?"})
            # print(f"Agent response:\n{agent_response}")
            # return agent_response

            # Create and run the agent
            llm = llm.bind_tools(tools)
            messages = [HumanMessage(content="what's (3 + 5) x 12?")]
            while True:
                print(f"Messages:{messages}")
                ai_msg = await llm.ainvoke(messages)
                messages.append(ai_msg)
                print(f"Response:{ai_msg}")
                if ai_msg.tool_calls:
                    for tool_call in ai_msg.tool_calls:
                        print(f"Tool call: {tool_call}")
                        tool_output = await session.call_tool(
                            tool_call["name"], tool_call["args"]
                        )
                        print(f"Tool output: {tool_output}")
                        tool_message = ToolMessage(
                            content=tool_output.content,
                            tool_call_id=tool_call["id"],
                            name=tool_call["name"],
                        )
                        print(f"Tool message: {tool_message}")
                        messages.append(tool_message)
                else:
                    return ai_msg


if __name__ == "__main__":
    asyncio.run(main())
