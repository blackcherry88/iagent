"""The openai implementation"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../../nbs/003_ai.imp.openai.ipynb.

# %% auto 0
__all__ = ["OpenAI"]

# %% ../../../../nbs/003_ai.imp.openai.ipynb 4
import httpx
import openai

from ..messages import HistoryMessage
from ..responses import ChatCompletionResponse
from ..service import ChatClientBase, ChatSettings


class OpenAI(ChatClientBase):
    def __init__(
        self,
        *,
        api_key: str | None = None,
        organization: str | None = None,
        project: str | None = None,
        base_url: str | httpx.URL | None = None,
        client: openai.OpenAI = None,
        settings: ChatSettings = None,
    ):
        if client is None:
            client = openai.OpenAI(
                api_key=api_key,
                organization=organization,
                project=project,
                base_url=base_url,
            )
        self.client = client
        self.settings = settings

    def chat(
        self, model: str, messages: HistoryMessage, setting: ChatSettings = None
    ) -> ChatCompletionResponse:
        if setting is None:
            setting = self.settings

        messages_dict = messages.to_dict()
        if setting is not None:
            return self.client.chat.completions.create(
                model=model,
                messages=messages_dict,
                temperature=setting.temperature,
                max_tokens=setting.max_tokens,
                top_p=setting.top_p,
                frequency_penalty=setting.frequency_penalty,
                presence_penalty=setting.presence_penalty,
            )
        else:
            return self.client.chat.completions.create(
                model=model, messages=messages_dict
            )
